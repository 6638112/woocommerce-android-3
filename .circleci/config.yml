commands:
  copy-gradle-properties:
    steps:
      - run:
          name: Setup gradle.properties
          command: cp gradle.properties-example gradle.properties
      - run:
          name: Enable build time reporting
          command: sed -i "s/tracksEnabled = false/tracksEnabled = true/" gradle.properties
  update-gradle-memory:
      parameters:
        jvmargs:
          type: string
          default: "Xmx1536m"
      steps:
        - run:
            name: Update memory setting
            command: sed -i "s/org.gradle.jvmargs=.*/org.gradle.jvmargs=-<< parameters.jvmargs >>/" gradle.properties

orbs:
  # Using 1.0 of our Orbs means it will use the latest 1.0.x version from https://github.com/wordpress-mobile/circleci-orbs
  android: wordpress-mobile/android@1.0
  android_ci: circleci/android@1.0.3
  git: wordpress-mobile/git@1.0
  bundle-install: toshimaru/bundle-install@0.3.1
  slack: circleci/slack@3.4.2

parameters:
  release_build:
     type: boolean
     default: false

version: 2.1
jobs:
  Lint:
    executor:
      name: android/default
      api-version: "28"
    steps:
      - checkout
      - android/restore-gradle-cache:
          cache-prefix: lint-cache-v1
      - copy-gradle-properties
      - run:
          name: Checkstyle & Detekt
          command: ./gradlew --stacktrace checkstyle detektAll
      - run:
          name: Lint
          command: ./gradlew --stacktrace lintVanillaRelease
      - run:
          name: Violations
          when: on_fail
          command: |
            if [ -n "$GITHUB_API_TOKEN" ]; then
              ./gradlew violationCommentsToGitHub -DGITHUB_PULLREQUESTID=${CIRCLE_PULL_REQUEST##*/} -DGITHUB_OAUTH2TOKEN=$GITHUB_API_TOKEN
            else
              echo "Not posting lint errors to Github because \$GITHUB_API_TOKEN is not found"
            fi
      - android/save-gradle-cache:
          cache-prefix: lint-cache-v1
      - store_artifacts:
          path: WooCommerce/build/reports
          destination: reports
  Test:
    executor:
      name: android/default
      api-version: "28"
    steps:
      - checkout
      - android/restore-gradle-cache:
          cache-prefix: tests-cache-v1
      - copy-gradle-properties
      - run:
          name: Unit tests WooCommerce
          command: ./gradlew --stacktrace testVanillaRelease
      - run:
          name: Unit tests CardReaderModule
          command: ./gradlew --stacktrace lib:cardreader:testRelease
      - android/save-gradle-cache:
          cache-prefix: tests-cache-v1
      - android/save-test-results
  Ensure Screenshots Tests Build:
    executor:
      name: android/default
      api-version: "28"
    steps:
      - checkout
      - android/restore-gradle-cache:
          cache-prefix: tests-cache-v1
      - copy-gradle-properties
      - run:
          # The instrumentation tests are not currently used and do tend to get
          # out of date when the UI changes, failing to build.
          #
          # This is a problem for the screenshots automation, which depends on
          # those tests.
          #
          # This check lets developers know when they accidentally broke the
          # instrumentation tests build, giving them a chance to either fix the
          # build or remove the broken tests if they are now obsolete.
          name: Check instrumentation tests build
          command: ./gradlew assembleVanillaDebugAndroidTest

  Connected Tests:
    description: |
      Creates an AVD, starts an emulator and runs Android UI tests.
      This is a job that wraps the "start-emulator-and-run-tests" command.
    executor: << parameters.executor >>
    parameters:
      additional-avd-args:
        default: ''
        description: |
          Additional args to be passed directly to the avd creation command
        type: string
      additional-emulator-args:
        default: ''
        description: |
          Additional args to be passed directly to the emulator command
        type: string
      avd-name:
        default: test
        description: |
          The name of the AVD to create
        type: string
      camera-back:
        default: ''
        description: |
          The value to use for the "-camera-back" flag.
          If set to "", the emulator will be run without the -camera-back flag.
        type: string
      camera-front:
        default: ''
        description: |
          The value to use for the "-camera-front" flag.
          If set to "", the emulator will be run without the -camera-front flag.
        type: string
      checkout:
        default: true
        description: Whether to run the checkout step
        type: boolean
      delay-adb:
        default: false
        description: |
          Whether to run the emulator with the -delay-adb flag
        type: boolean
      disable-animations:
        default: true
        description: >
          Whether to disable animations that may interfere with tests, after the
          emulator starts up
        type: boolean
      executor:
        default: android-machine
        description: Executor for the job
        type: executor
      gpu:
        default: swiftshader_indirect
        description: |
          The value to use for the "-gpu" flag.
          If set to "", the emulator will be run without the -gpu flag.
        type: string
      install-system-image:
        default: true
        description: |
          Whether to first install the system image via sdkmanager
        type: boolean
      kill-emulators:
        default: true
        description: |
          Whether to kill the emulators after the tests complete
        type: boolean
      max-tries:
        default: 2
        description: 'Max number of tries. To disable retries, set this to 1.'
        type: integer
      memory:
        default: -1
        description: |
          The value to use for the "-memory" flag.
          If set to -1, the emulator will be run without the -memory flag.
        type: integer
      no-audio:
        default: true
        description: |
          Whether to run the emulator with the -noaudio flag
        type: boolean
      no-boot-anim:
        default: true
        description: |
          Whether to run the emulator with the -no-boot-anim flag
        type: boolean
      no-output-timeout:
        default: 10m
        description: |
          Use this to configure the no_output_timeout value of the test run
        type: string
      no-snapshot:
        default: true
        description: |
          Whether to run the emulator with the -no-snapshot flag
        type: boolean
      no-window:
        default: true
        description: |
          Whether to run the emulator with the -no-window flag
        type: boolean
      override-emulator-args:
        default: ''
        description: >
          If this is set to a non-blank value, the emulator command will be

          run with the -avd flag and the value of "override-args" (i.e. none of the
          defaults

          provided by the orb command will be used)
        type: string
      post-emulator-launch-assemble-command:
        default: ./gradlew assembleDebugAndroidTest
        description: |
          If this is set to a non-blank value, the configured command will be run
          after the emulator has been launched, and before commencing the
          wait for the emulator to finish starting up.
        type: string
      post-emulator-wait-steps:
        default: []
        description: |
          Steps to execute after waiting for the emulator to start up
        type: steps
      post-run-tests-steps:
        default: []
        description: |
          Steps to run after the tests
        type: steps
      pre-emulator-wait-steps:
        default: []
        description: >
          Steps to execute while before beginning to wait for the emulator to start
          up
        type: steps
      pre-run-tests-steps:
        default: []
        description: |
          Steps to run before the tests
        type: steps
      restore-gradle-cache-find-args:
        default: . -name 'build.gradle'
        description: |
          Use this to customize how the find command is used to look for relevant
          file changes.
        type: string
      restore-gradle-cache-post-emulator-launch:
        default: true
        description: |
          Whether to restore the gradle cache after the emulator has been launched,
          and before commencing the wait for the emulator to finish starting up.
        type: boolean
      restore-gradle-cache-prefix:
        default: v1
        description: >
          Cache prefix used if the "restore-gradle-cache-post-emulator-launch"
          parameter

          is set to true.
        type: string
      retry-interval:
        default: 5
        description: Duration in seconds to wait before the next try
        type: integer
      run-logcat:
        default: false
        description: |
          Whether to run with logcat in the background, after the emulator starts up
        type: boolean
      run-tests-working-directory:
        default: .
        description: Working directory to run the tests in
        type: string
      save-gradle-cache:
        default: true
        description: |
          Whether to write to the gradle cache after the tests have run
        type: boolean
      system-image:
        default: system-images;android-29;default;x86
        description: |
          Name of system image e.g. "system-images;android-29;default;x86".
          It should match the name seen in the "sdkmanager --list" output.
        type: string
      test-command:
        default: ./gradlew connectedDebugAndroidTest
        description: Command to run in order to run the tests
        type: string
      verbose:
        default: true
        description: |
          Whether to run the emulator with the -verbose flag
        type: boolean
      wait-for-emulator:
        default: true
        description: |
          Whether to wait for the emulator to start up
        type: boolean
    steps:
      - when:
          condition: << parameters.checkout >>
          steps:
            - checkout
      - copy-gradle-properties            
      - start-emulator-and-run-tests:
          additional-avd-args: << parameters.additional-avd-args >>
          additional-emulator-args: << parameters.additional-emulator-args >>
          avd-name: << parameters.avd-name >>
          camera-back: << parameters.camera-back >>
          camera-front: << parameters.camera-front >>
          delay-adb: << parameters.delay-adb >>
          disable-animations: << parameters.disable-animations >>
          gpu: << parameters.gpu >>
          install-system-image: << parameters.install-system-image >>
          kill-emulators: << parameters.kill-emulators >>
          max-tries: << parameters.max-tries >>
          memory: << parameters.memory >>
          no-audio: << parameters.no-audio >>
          no-boot-anim: << parameters.no-boot-anim >>
          no-output-timeout: << parameters.no-output-timeout >>
          no-snapshot: << parameters.no-snapshot >>
          no-window: << parameters.no-window >>
          override-emulator-args: << parameters.override-emulator-args >>
          post-emulator-launch-assemble-command: << parameters.post-emulator-launch-assemble-command >>
          post-emulator-wait-steps: << parameters.post-emulator-wait-steps >>
          post-run-tests-steps: << parameters.post-run-tests-steps >>
          pre-emulator-wait-steps: << parameters.pre-emulator-wait-steps >>
          pre-run-tests-steps: << parameters.pre-run-tests-steps >>
          restore-gradle-cache-find-args: << parameters.restore-gradle-cache-find-args >>
          restore-gradle-cache-post-emulator-launch: << parameters.restore-gradle-cache-post-emulator-launch >>
          restore-gradle-cache-prefix: << parameters.restore-gradle-cache-prefix >>
          retry-interval: << parameters.retry-interval >>
          run-logcat: << parameters.run-logcat >>
          run-tests-working-directory: << parameters.run-tests-working-directory >>
          save-gradle-cache: << parameters.save-gradle-cache >>
          system-image: <<parameters.system-image>>
          test-command: << parameters.test-command >>
          verbose: << parameters.verbose >>
          wait-for-emulator: << parameters.wait-for-emulator >>


  Installable Build:
    executor:
      name: android/default
      api-version: "28"
    steps:
      - checkout
      - bundle-install/bundle-install:
          cache_key_prefix: installable-build-v2
      - run:
          name: Copy Secrets
          command: FASTLANE_SKIP_UPDATE_CHECK=1 bundle exec fastlane run configure_apply
      - update-gradle-memory
      - android/restore-gradle-cache
      - run:
          name: Build APK
          command: |
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
              PREFIX="pr-${PR_NUMBER}"
            else
              PREFIX="$CIRCLE_BRANCH"
            fi
            VERSION_NAME="${PREFIX}-build-${CIRCLE_BUILD_NUM}"
            echo "export VERSION_NAME=$VERSION_NAME" >> $BASH_ENV
            ./gradlew --stacktrace assembleJalapenoDebug -PversionName="$VERSION_NAME"
      - android/save-gradle-cache
      - run:
          name: Prepare APK
          command: |
            mkdir -p Artifacts
            mv WooCommerce/build/outputs/apk/jalapeno/debug/WooCommerce-jalapeno-debug.apk "Artifacts/WooCommerce-${VERSION_NAME}.apk"
      - store_artifacts:
          path: Artifacts
          destination: Artifacts
  Release Build:
    executor:
      name: android/default
      api-version: "28"
    steps:
      - git/shallow-checkout
      - bundle-install/bundle-install:
          cache_key_prefix: release-build-v2
      - run:
          name: Copy Secrets
          command: FASTLANE_SKIP_UPDATE_CHECK=1 bundle exec fastlane run configure_apply
      - update-gradle-memory
      - android/restore-gradle-cache
      - run:
          name: Build APK
          command: |
            APP_VERSION=$(./gradlew -q printVersionName | tail -1)
            echo "export SLACK_FAILURE_MESSAGE=':red_circle: Build for WooCommerce Android $APP_VERSION failed!'" >> $BASH_ENV
            echo "export SLACK_SUCCESS_MESSAGE=':tada: WooCommerce Android $APP_VERSION has been deployed!'" >> $BASH_ENV
            # Prevent fastlane from checking for updates, also removing the verbose fastlane changelog at the end of each invocation.
            echo "export FASTLANE_SKIP_UPDATE_CHECK=1" >> $BASH_ENV
            mv ~/.configure/woocommerce-android/secrets/debug_a8c.keystore ~/.android/debug.keystore
            if [[ $APP_VERSION == *"-rc-"* ]]; then
              bundle exec fastlane build_and_upload_beta skip_confirm:true skip_prechecks:true create_release:true
            else
              bundle exec fastlane build_and_upload_release skip_confirm:true skip_prechecks:true create_release:true
            fi
      - android/save-gradle-cache
      - slack/status:
          include_job_number_field: false
          include_project_field: false
          include_visit_job_action: false
          webhook: '${SLACK_BUILD_WEBHOOK}'
          failure_message: '${SLACK_FAILURE_MESSAGE}'
          success_message: '${SLACK_SUCCESS_MESSAGE}'


workflows:
  "WooCommerce Android":
    unless: << pipeline.parameters.release_build >>
    jobs:
      - Lint
      - Test
      - Installable Build
      - Ensure Screenshots Tests Build
  Optional Tests:
    unless:
      or:
        - << pipeline.parameters.release_build >>
    #Optionally run connected tests on PRs
    jobs:
      - Hold:
          type: approval
          filters:
            branches:
              ignore:
                - develop
                - /^release.*/
                - /pull\/[0-9]+/
      - Connected Tests:
          requires: [Hold]
          executor:
            name: android/android-machine
            resource-class: large   
  Release Build:
    when: << pipeline.parameters.release_build >>
    jobs:
      - Release Build
