default_platform(:android)
fastlane_require 'dotenv'

platform :android do
########################################################################
# Environment
########################################################################
Dotenv.load('~/.wcandroid-env.default')
ENV[GHHELPER_REPO="woocommerce/woocommerce-android"]
ENV["PROJECT_NAME"]="WooCommerce"
ENV["PROJECT_ROOT_FOLDER"]="./"
ENV["validate_translations"]="buildVanillaRelease"

########################################################################
# Release Lanes
########################################################################  
  #####################################################################################
  # code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane code_freeze codefreeze_version:<version> [update_release_branch_version:<update flag>] [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane code_freeze 
  # bundle exec fastlane code_freeze skip_confirm:true
  #####################################################################################
  desc "Creates a new release branch from the current develop"
  lane :code_freeze do | options |
    old_version = android_codefreeze_prechecks(options)
   
    android_bump_version_release()
    new_version = android_get_app_version()
    android_update_release_notes(new_version: new_version)
    setbranchprotection(repository:GHHELPER_REPO, branch: "release/#{new_version}")
    setfrozentag(repository:GHHELPER_REPO, milestone: new_version)
    
    localize_libs()
    android_tag_build()
    get_prs_list(repository:GHHELPER_REPO, start_tag:"release/#{old_version}", report_path:"#{File.expand_path('~')}/wcandroid_prs_list_#{old_version}_#{new_version}.txt")
  end

#####################################################################################
# update_appstore_strings 
# -----------------------------------------------------------------------------------
# This lane gets the data from the txt files in the WooCommerce/metadata/ folder
# and updates the .pot file that is then picked by GlotPress for translations.
# -----------------------------------------------------------------------------------
# Usage:
# fastlane update_appstore_strings version:<version>
#
# Example:
# fastlane update_appstore_strings version:1.1
#####################################################################################
desc "Updates the PlayStoreStrings.pot file"
lane :update_appstore_strings do |options| 
  prj_folder = Dir.pwd + "/.."

  files = {
    release_note: prj_folder + "/WooCommerce/metadata/release_notes.txt",
    play_store_promo: prj_folder + "/WooCommerce/metadata/short_description.txt",
    play_store_desc: prj_folder + "/WooCommerce/metadata/full_description.txt",
    play_store_app_title: prj_folder + "/WooCommerce/metadata/title.txt",
    play_store_screenshot_1: prj_folder + "/WooCommerce/metadata/promo_screenshot_1.txt",
    play_store_screenshot_1_b: prj_folder + "/WooCommerce/metadata/promo_screenshot_1_b.txt",
    play_store_screenshot_2: prj_folder + "/WooCommerce/metadata/promo_screenshot_2.txt",
    play_store_screenshot_3: prj_folder + "/WooCommerce/metadata/promo_screenshot_3.txt",
    play_store_screenshot_4: prj_folder + "/WooCommerce/metadata/promo_screenshot_4.txt",
    play_store_screenshot_5: prj_folder + "/WooCommerce/metadata/promo_screenshot_5.txt",
    play_store_screenshot_6: prj_folder + "/WooCommerce/metadata/promo_screenshot_6.txt",
    play_store_screenshot_7: prj_folder + "/WooCommerce/metadata/promo_screenshot_7.txt",
    play_store_screenshot_8: prj_folder + "/WooCommerce/metadata/promo_screenshot_8.txt"
  }

  android_update_metadata_source(po_file_path: prj_folder + "/WooCommerce/metadata/PlayStoreStrings.pot", 
    source_files: files, 
    release_version: options[:version])
end 

  #####################################################################################
  # finalize_release
  # -----------------------------------------------------------------------------------
  # This lane finalize a release: updates store metadata and runs the release checks
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_release [skip_confirm:<skip confirm>] 
  #
  # Example:
  # bundle exec fastlane finalize_release 
  # bundle exec fastlane finalize_release skip_confirm:true 
  #####################################################################################
  desc "Updates store metadata and runs the release checks"
  lane :finalize_release do | options |
    android_finalize_prechecks(options)
    android_update_metadata(options) unless android_current_branch_is_hotfix
  end

  #####################################################################################
  # build_release
  # -----------------------------------------------------------------------------------
  # This lane builds the final release of the app and uploads it 
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_release [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane build_release 
  # bundle exec fastlane build_release skip_confirm:true 
  #####################################################################################
  desc "Builds and updates for distribution"
  lane :build_release do | options |
    android_build_prechecks(skip_confirm: options[:skip_confirm], 
      alpha: false,
      beta: false,
      final: true)
    android_build_preflight()
    
    # Create the file names
    version=android_get_release_version()
    build_bundle(version: version, flavor:"Vanilla")
  end

  #####################################################################################
  # build_test_releases
  # -----------------------------------------------------------------------------------
  # This lane builds the app it for both internal and external distribution 
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_test_releases [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane build_test_releases 
  # bundle exec fastlane build_test_releases skip_confirm:true 
  #####################################################################################
  desc "Builds and updates for distribution"
  lane :build_test_releases do | options |
    android_build_prechecks(skip_confirm: options[:skip_confirm], 
      alpha: false,
      beta: true,
      final: false)
    android_build_preflight()
    build_beta(skip_prechecks: true, skip_confirm: options[:skip_confirm])
  end

  #####################################################################################
  # build_beta
  # -----------------------------------------------------------------------------------
  # This lane builds the app it for internal testing  
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_beta [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane build_beta 
  # bundle exec fastlane build_beta skip_confirm:true 
  #####################################################################################
  desc "Builds and updates for distribution"
  lane :build_beta do | options |
    android_build_prechecks(skip_confirm: options[:skip_confirm], beta: true) unless (options[:skip_prechecks])
    android_build_preflight() unless (options[:skip_prechecks])

    # Create the file names
    version=android_get_release_version()
    build_bundle(version: version, flavor:"Vanilla")
  end
  
#####################################################################################
# localize_libs 
# -----------------------------------------------------------------------------------
# This lane gets the data from the dependencies and updates the main strings.xml file
# -----------------------------------------------------------------------------------
# Usage:
# fastlane localize_libs 
#
# Example:
# fastlane localize_libs 
#####################################################################################
desc "Merge libraries strings files into the main app one"
lane :localize_libs do | options |
  main_strings_path = "./WooCommerce/src/main/res/values/strings.xml"
  libraries_strings_path = [
    {library: "Login Library", strings_path: "./libs/login/WordPressLoginFlow/src/main/res/values/strings.xml", exclusions: ["default_web_client_id"]}
  ]

  if (an_localize_libs(app_strings_path: main_strings_path, libs_strings_path: libraries_strings_path)) then
    UI.important("Your #{main_strings_path} has changed.")
    UI.input("Please, review the changes, commit them and press return to continue.")
  end
end

########################################################################
# Helper Lanes
########################################################################  
desc "Get a list of pull request from `start_tag` to the current state"
lane :get_pullrequests_list do | options |
  get_prs_list(repository:GHHELPER_REPO, start_tag:"#{options[:start_tag]}", report_path:"#{File.expand_path('~')}/wcandroid_prs_list.txt")
end

  #####################################################################################
  # build_bundle
  # -----------------------------------------------------------------------------------
  # This lane builds an app bundle
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_bundle [skip_confirm:<skip confirm>]
  #####################################################################################
  desc "Builds an app bundle"
  lane :build_bundle do | options |
    # Create the file names
    version=options[:version]
    name="wcandroid-#{version["name"]}.aab"
    apk_name="wcandroid-#{version["name"]}-universal.apk"
    aab_file="WooCommerce.aab"
    output_dir="WooCommerce/build/outputs/bundle/"
    build_dir="artifacts/"
    logfile_path="#{build_dir}build.log"

    # Build
    Dir.chdir("..") do
      UI.message("Cleaning branch...")
      sh("echo \"Cleaning branch\" >> #{logfile_path}")
      sh("./gradlew clean >> #{logfile_path} 2>&1")
      UI.message("Running lint...")
      sh("echo \"Running lint...\" >> #{logfile_path}")
      sh("./gradlew lint#{options[:flavor]}Release >> #{logfile_path} 2>&1")
      UI.message("Building #{version["name"]} / #{version["code"]} - #{aab_file}...")
      sh("echo \"Building #{version["name"]} / #{version["code"]} - #{aab_file}...\" >> #{logfile_path}")
      sh("./gradlew bundle#{options[:flavor]}Release >> #{logfile_path} 2>&1")
      sh("cp -v #{output_dir}#{options[:flavor]}Release/#{aab_file} #{build_dir}#{name} | tee -a #{logfile_path}")
      UI.message("Bundle ready: #{name}")
      sh("echo \"Bundle ready: #{name}\" >> #{logfile_path}")
      extract_universal_apk(bundle_path:"#{build_dir}#{name}", apk_path:"#{build_dir}#{apk_name}")
    end
    "#{build_dir}#{name}"
  end

  #####################################################################################
# Private lanes
#####################################################################################
private_lane :extract_universal_apk do | options |
  bundle_path=options[:bundle_path]
  apk_path=options[:apk_path]
  temp_dir = Dir.mktmpdir()

  command = "source ./tools/gradle-functions.sh"
  command << "&& bundletool build-apks --bundle=\"#{bundle_path}\" \\
  --output=\"#{temp_dir}/universal.apks\" \\
  --mode=universal \\
  --ks=\"$(get_gradle_property gradle.properties storeFile)\" \\
  --ks-pass=\"pass:$(get_gradle_property gradle.properties storePassword)\" \\
  --ks-key-alias=\"$(get_gradle_property gradle.properties keyAlias)\" \\
  --key-pass=\"pass:$(get_gradle_property gradle.properties keyPassword)\""
  sh(command)

  sh("unzip \"#{temp_dir}/universal.apks\" -d \"#{temp_dir}\"")
  FileUtils.cp_r("#{temp_dir}/universal.apk", "#{apk_path}", remove_destination: true)  
  FileUtils.rm_rf("#{temp_dir}")
end

end