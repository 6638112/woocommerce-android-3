allprojects {
    apply plugin: JacocoPlugin
}

jacoco {
    toolVersion = "0.8.7"
}

rootProject.afterEvaluate {
    tasks.create(name: "jacocoTestReport", type: JacocoReport, dependsOn: [':WooCommerce:testWasabiDebugUnitTest', ':libs:cardreader:testDebugUnitTest']) {

        group = "Reporting"
        description = "Generate Jacoco coverage reports for WasabiDebug variant"

        reports {
            xml.getRequired().set(true)
            html.getRequired().set(true)
        }

        def excludes = [
                'android/databinding/**/*.class',
                '**/android/databinding/*Binding.class',
                '**/android/databinding/*',
                '**/androidx/databinding/*',
                '**/BR.*',
                '**/R.class',
                '**/R$*.class',
                '**/*$$*',
                '**/BuildConfig.*',
                '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                '**/*Dagger*.*',
                '**/*MembersInjector*.*',
                '**/*_Provide*Factory*.*',
                '**/*_Factory*.*',
                '**/*$inlined$*.*', // Kotlin specific, Jacoco can not handle several "$" in class name.
                '**/dagger',
                '**/*Hilt*.*',
                '**/hilt_aggregated_deps',
                '**/com/bumptech',
                '**/*FragmentDirections*',
                '**/*FragmentArgs*'
        ]

        def kClasses = rootProject.subprojects.collect { proj ->
            ["${proj.buildDir}/tmp/kotlin-classes/wasabiDebug", "${proj.buildDir}/tmp/kotlin-classes/debug"]
        }.flatten()

        def kotlinClasses = kClasses.collect { path ->
            fileTree(dir: path, excludes: excludes)
        }

        def sources = rootProject.subprojects.collect { proj ->
            ["${proj.projectDir}/src/main/java", "${proj.projectDir}/src/main/kotlin"]
        }.flatten()

        sourceDirectories.setFrom(files([sources]))
        classDirectories.from = files([kotlinClasses])

        def executions = rootProject.subprojects.findAll { proj ->
            def path = "${proj.buildDir}/jacoco/testWasabiDebugUnitTest.exec"
            (new File(path)).exists()
        }.collect { proj ->
            "${proj.buildDir}/jacoco/testWasabiDebugUnitTest.exec"
        }
        executionData.from = files(executions)
    }
}
